import React, { useState } from "react";
import useSocket from "@/hooks/useScocket";
import useChat from "../hooks/useChat";
import JoinRoom from "@/components/JoinRooms";
import ChatRoom from "../components/ChatRoom";
import ChatApp from "./chat";
import { AppBar, Avatar, Box, Button, Toolbar, Typography } from "@mui/material";
import {auth} from "@/config/firebase";
import { signOut } from "firebase/auth";

const ChatApps = () => {

  const handleLogout = () => {
    signOut(auth).then(() => {
      console.log("User signed out!");
    }).catch((error) => {
      console.error("Error signing out:", error);
    });
  };
    // const [roomId, setRoomId] = useState("");
    // const [username, setUsername] = useState("");
    // const socket = useSocket(process.env.NEXT_PUBLIC_LOCAL_URL!);
    // const { messages, activeUsers, otherUserTyping, sendMessage, startTyping, stopTyping } =
    //     useChat(socket, roomId, username);

    return (
        <div>
                 <AppBar position="sticky" sx={{ backgroundColor: "#000", padding: "10px" }}>
                <Toolbar sx={{ display: "flex", justifyContent: "space-between" }}>
                    <Typography variant="h6">Chat</Typography>
                    
                    <Box sx={{ display: "flex", alignItems: "center" }}>
                        {/* Avatar */}
                        <Avatar sx={{ marginRight: "10px" }} />
                        {/* Logout Button */}
                        <Button variant="outlined" sx={{ color: "#fff" }} onClick={() => console.log('Logout')}>
                            Logout
                        </Button>
                    </Box>
                </Toolbar>
            </AppBar>
            {/* {roomId && username ? (
                <ChatRoom
                    roomId={roomId}
                    username={username}
                    messages={messages}
                    activeUsers={activeUsers}
                    otherUserTyping={otherUserTyping}
                    sendMessage={sendMessage}
                    handleTyping={(isTyping) => (isTyping ? startTyping() : stopTyping())}
                />
            ) : (
                <JoinRoom onJoin={(room, user) => {
                    setRoomId(room);
                    setUsername(user);
                }} />
            )} */}

            <ChatApp />
        </div>
    );
};

export default ChatApps;
